---
# Enable CSI hostpath driver via addon
apiVersion: batch/v1
kind: Job
metadata:
  name: enable-csi-addon
  namespace: default
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    spec:
      serviceAccountName: storage-admin
      containers:
      - name: enable-csi
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Checking CSI hostpath driver availability..."
          # Wait for CSI driver to be available (should be enabled externally)
          for i in {1..30}; do
            if kubectl get csidriver hostpath.csi.k8s.io 2>/dev/null; then
              echo "CSI hostpath driver found!"
              break
            fi
            echo "Waiting for CSI driver... attempt $i/30"
            sleep 10
          done
          
          # Check if CSI driver pods are ready
          echo "Waiting for CSI driver pods to be ready..."
          kubectl wait --for=condition=Ready --timeout=300s pod -l app=csi-hostpathplugin -n kube-system || true
          echo "CSI addon check completed"
      restartPolicy: OnFailure
  backoffLimit: 3
---
# ServiceAccount for storage operations
apiVersion: v1
kind: ServiceAccount
metadata:
  name: storage-admin
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: storage-admin
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["csidrivers", "storageclasses"]
  verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: storage-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: storage-admin
subjects:
- kind: ServiceAccount
  name: storage-admin
  namespace: default
---
# StorageClass with full fsGroup support
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: fsgroup-hostpath
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
  labels:
    app.kubernetes.io/managed-by: argocd
provisioner: hostpath.csi.k8s.io
reclaimPolicy: Retain
volumeBindingMode: Immediate
allowVolumeExpansion: true
parameters:
  # Ensure fsGroup compatibility
  fsType: ext4
mountOptions:
  # Options for better fsGroup support
  - rw
  - relatime