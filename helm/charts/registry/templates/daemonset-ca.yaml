{{- if .Values.tls.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "registry.fullname" . }}-ca-installer
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "registry.labels" . | nindent 4 }}
    app.kubernetes.io/component: ca-installer
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "registry.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: ca-installer
  template:
    metadata:
      labels:
        {{- include "registry.labels" . | nindent 8 }}
        app.kubernetes.io/component: ca-installer
    spec:
      hostPID: true
      hostNetwork: true
      containers:
      - name: ca-installer
        image: alpine:latest
        command:
        - sh
        - -c
        - |
          # Configure registry as insecure for Docker and containerd
          
          # Docker daemon configuration
          DOCKER_CONFIG_DIR="/host/etc/docker"
          mkdir -p "$DOCKER_CONFIG_DIR"
          
          # Create or update daemon.json to mark registry as insecure
          cat > "$DOCKER_CONFIG_DIR/daemon.json" <<EOF
          {
            "insecure-registries": [
              "registry.registry.svc.cluster.local:5000",
              "192.168.67.2:5000",
              "10.0.0.0/8"
            ],
            "registry-mirrors": [],
            "debug": false
          }
          EOF
          
          # Restart Docker daemon to apply changes
          if [ -f /host/bin/systemctl ]; then
            chroot /host systemctl restart docker || echo "Docker restart failed or not available"
          fi
          
          # Containerd configuration for insecure registry
          CONTAINERD_CONFIG_DIR="/host/etc/containerd/certs.d/registry.registry.svc.cluster.local:5000"
          mkdir -p "$CONTAINERD_CONFIG_DIR"
          
          cat > "$CONTAINERD_CONFIG_DIR/hosts.toml" <<EOF
          server = "https://registry.registry.svc.cluster.local:5000"
          
          [host."http://registry.registry.svc.cluster.local:5000"]
            capabilities = ["pull", "resolve", "push"]
            skip_verify = true
          
          [host."https://registry.registry.svc.cluster.local:5000"]
            capabilities = ["pull", "resolve", "push"]  
            skip_verify = true
          EOF
          
          # Also configure for IP access
          CONTAINERD_IP_CONFIG_DIR="/host/etc/containerd/certs.d/192.168.67.2:5000"
          mkdir -p "$CONTAINERD_IP_CONFIG_DIR"
          
          cat > "$CONTAINERD_IP_CONFIG_DIR/hosts.toml" <<EOF
          server = "https://192.168.67.2:5000"
          
          [host."http://192.168.67.2:5000"]
            capabilities = ["pull", "resolve", "push"]
            skip_verify = true
          
          [host."https://192.168.67.2:5000"]
            capabilities = ["pull", "resolve", "push"]
            skip_verify = true
          EOF
          
          echo "Registry configured as insecure for Docker and containerd"
          # Keep pod running
          sleep infinity
        volumeMounts:
        - name: ca-cert
          mountPath: /ca
          readOnly: true
        - name: docker-config
          mountPath: /host/etc/docker
        - name: containerd-certs
          mountPath: /host/etc/containerd/certs.d
        - name: host-root
          mountPath: /host
          mountPropagation: HostToContainer
        securityContext:
          privileged: true
      volumes:
      - name: ca-cert
        secret:
          secretName: registry-ca
      - name: docker-config
        hostPath:
          path: /etc/docker
          type: DirectoryOrCreate
      - name: containerd-certs
        hostPath:
          path: /etc/containerd/certs.d
          type: DirectoryOrCreate
      - name: host-root
        hostPath:
          path: /
          type: Directory
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
        operator: Exists
{{- end }}
