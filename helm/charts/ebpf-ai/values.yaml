# Default values for ebpf-ai chart

global:
  namespace: ebpf-security
  registry: "registry.kube-system.svc.cluster.local:80"  # Minikube native registry
  imageTag: "latest"
  
# ML Detector Configuration
mlDetector:
  name: ml-detector
  replicaCount: 1
  image:
    repository: ml-detector  
    tag: latest
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 5000
    targetPort: 5000
    
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
      
  # Persistent storage for ML models
  persistence:
    enabled: true
    size: 1Gi
    storageClass: ""  # Use default storage class
      
  env:
    - name: MODEL_PATH
      value: "/data/models"  # Standard data directory for ML models
    - name: TRAINING_ENABLED
      value: "true"  # Enable model re-training
    - name: BASELINE_ENABLED
      value: "true"
    - name: PROMETHEUS_MULTIPROC_DIR
      value: "/tmp/prometheus"
    - name: PROMETHEUS_URL
      value: "http://prometheus-server.monitoring.svc.cluster.local:9090"
      
  livenessProbe:
    httpGet:
      path: /health
      port: 5000
    initialDelaySeconds: 30
    periodSeconds: 10
    
  readinessProbe:
    httpGet:
      path: /health
      port: 5000
    initialDelaySeconds: 5
    periodSeconds: 5
  serviceAccount:
    create: true
    name: ""

# eBPF Monitor Configuration  
ebpfMonitor:
  enabled: true
  name: ebpf-monitor
  replicaCount: 1
  image:
    repository: ebpf-monitor
    tag: latest
    pullPolicy: IfNotPresent
    
  service:
    type: ClusterIP
    port: 8800
    targetPort: 8800
    
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
      
  env:
    - name: ML_DETECTOR_URL
      value: "http://ml-detector:5000"
    - name: INTERFACE
      value: "eth0"
    - name: STATS_WINDOW
      value: "1s"
    - name: POST_INTERVAL
      value: "2s"
    - name: HTTP_CLIENT_TIMEOUT
      value: "2s"
    - name: LOG_LEVEL
      value: "info"
      
  livenessProbe:
    httpGet:
      path: /health
      port: 8800
    initialDelaySeconds: 10
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /health
      port: 8800
    initialDelaySeconds: 5
    periodSeconds: 5
  serviceAccount:
    create: true
    name: ebpf-monitor

# Attack Simulator Configuration
attackSimulator:
  enabled: true
  name: attack-simulator
  replicaCount: 1
  image:
    repository: attack-simulator
    tag: latest
    pullPolicy: IfNotPresent
    
  env:
    - name: ATTACK_MODE
      value: "mixed"
    - name: INTENSITY
      value: "3"
    - name: TARGET_NETWORK
      value: "10.0.0.0/24"

# HPA Configuration
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Network Policies
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress

# Redis Configuration (Dependency)
redis:
  enabled: true
  auth:
    enabled: false
  master:
    persistence:
      enabled: false
  replica:
    replicaCount: 1
    persistence:
      enabled: false

# Prometheus Configuration (Dependency)
prometheus:
  enabled: false
  alertmanager:
    enabled: true
    persistentVolume:
      enabled: false
  server:
    persistentVolume:
      enabled: false
    service:
      type: ClusterIP
      servicePort: 9090
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    extraScrapeConfigs: |
      - job_name: 'ml-detector'
        static_configs:
          - targets: ['ml-detector:5000']
        metrics_path: '/metrics'
        scrape_interval: 30s
      - job_name: 'ebpf-monitor'
        static_configs:
          - targets: ['ebpf-monitor:8800']
        metrics_path: '/metrics'
        scrape_interval: 15s
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - ebpf-security
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
            
# Grafana Configuration (Dependency)
grafana:
  enabled: false
  persistence:
    enabled: false
  service:
    type: LoadBalancer
    port: 80
  adminPassword: admin
  plugins:
    - grafana-piechart-panel
    - grafana-worldmap-panel
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://ebpf-ai-prometheus-server:9090
          access: proxy
          isDefault: true
          editable: true
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'ebpf-ai'
          orgId: 1
          folder: 'eBPF + AI'
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/ebpf-ai
  # Dashboards disabled - using sidecar.dashboards instead to avoid volume conflicts
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      folder: /tmp/dashboards
      provider:
        foldersFromFilesStructure: true

# ServiceMonitor CRDs (Prometheus Operator)
serviceMonitor:
  enabled: false

# Metrics annotations on pods (for non-operator Prometheus)
metrics:
  addPrometheusAnnotations: true

# Storage Configuration
persistence:
  enabled: true
  storageClass: "standard"
  size: 5Gi
  accessMode: ReadWriteOnce

# Ingress Configuration
ingress:
  enabled: true
  hosts:
    - host: ebpf-ai.local
      paths:
        api: /api
        metrics: /metrics
        grafana: /grafana
        prometheus: /prometheus
        argocd: /argocd
  registry:
    enabled: false
    host: registry.local
  tls: []
  annotations: {}
  rateLimit:
    enabled: true
    rps: 100
    window: 1m

# Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
