apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.mlDetector.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.mlDetector.name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: ml-detector
    app.kubernetes.io/part-of: ebpf-ai
    app.kubernetes.io/version: {{ .Values.mlDetector.image.tag | default .Values.global.imageTag | quote }}
spec:
  replicas: {{ .Values.mlDetector.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.mlDetector.name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.mlDetector.name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: ml-detector
        app.kubernetes.io/part-of: ebpf-ai
      annotations:
        {{- if and .Values.metrics.addPrometheusAnnotations (not .Values.serviceMonitor.enabled) }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.mlDetector.service.targetPort }}"
        prometheus.io/path: "/metrics"
        {{- end }}
    spec:
      serviceAccountName: {{ include "ebpf-ai.mlDetector.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
      - name: {{ .Values.mlDetector.name }}
        image: "{{ .Values.global.registry }}/{{ .Values.mlDetector.image.repository }}:{{ .Values.mlDetector.image.tag | default .Values.global.imageTag }}"
        imagePullPolicy: {{ .Values.mlDetector.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.mlDetector.service.targetPort }}
          protocol: TCP
        env:
        {{- range .Values.mlDetector.env }}
        - name: {{ .name }}
          value: {{ .value | quote }}
        {{- end }}
        resources:
          {{- toYaml .Values.mlDetector.resources | nindent 10 }}
        livenessProbe:
          {{- toYaml .Values.mlDetector.livenessProbe | nindent 10 }}
        readinessProbe:
          {{- toYaml .Values.mlDetector.readinessProbe | nindent 10 }}
        {{- if .Values.persistence.enabled }}
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
        {{- end }}
      {{- if .Values.persistence.enabled }}
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: {{ .Values.mlDetector.name }}-pvc
      {{- end }}
---
{{- if .Values.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.mlDetector.name }}-pvc
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
    - {{ .Values.persistence.accessMode }}
  storageClassName: {{ .Values.persistence.storageClass }}
  resources:
    requests:
      storage: {{ .Values.persistence.size }}
{{- end }}
