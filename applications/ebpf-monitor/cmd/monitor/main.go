package main

import (
	"bytes"
	"context"
	"encoding/binary"
	"encoding/json"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"sync"
	"syscall"
	"time"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
	"github.com/prometheus/client_golang/prometheus/promhttp"

	"github.com/jeanlopezxyz/ebpf-ia-gitops/applications/ebpf-monitor/pkg/config"
	"github.com/jeanlopezxyz/ebpf-ia-gitops/applications/ebpf-monitor/pkg/metrics"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc clang -cflags "-O2 -g -Wall -Werror" network ../../bpf/network_monitor.c

// NetworkEvent represents a network event (must match C struct)
type NetworkEvent struct {
	SrcIP      uint32 `json:"src_ip"`
	DstIP      uint32 `json:"dst_ip"`
	SrcPort    uint16 `json:"src_port"`
	DstPort    uint16 `json:"dst_port"`
	Protocol   uint8  `json:"protocol"`
	PacketSize uint32 `json:"packet_size"`
	Timestamp  uint64 `json:"timestamp"`
	TCPFlags   uint8  `json:"tcp_flags"`
}

// NetworkStats holds aggregated statistics
type NetworkStats struct {
	PacketsPerSecond float64 `json:"packets_per_second"`
	BytesPerSecond   float64 `json:"bytes_per_second"`
	UniqueIPs        int     `json:"unique_ips"`
	UniquePorts      int     `json:"unique_ports"`
	TCPPackets       int64   `json:"tcp_packets"`
	UDPPackets       int64   `json:"udp_packets"`
	SYNPackets       int64   `json:"syn_packets"`
}

// Application represents the main eBPF application
type Application struct {
	config config.Config
	ctx    context.Context
	cancel context.CancelFunc

	// eBPF resources
	objs   *networkObjects
	link   link.Link
	reader *ringbuf.Reader

	// Statistics tracking
	mu         sync.RWMutex
	stats      NetworkStats
	ips        map[uint32]struct{}
	ports      map[uint16]struct{}
	tcpPackets int64
	udpPackets int64
	synPackets int64
	totalBytes uint64
	totalPkts  uint64
	lastReset  time.Time
}

// NewApplication creates a new eBPF application
func NewApplication() (*Application, error) {
	cfg := config.New()
	metrics.Init()

	ctx, cancel := context.WithCancel(context.Background())

	return &Application{
		config:    cfg,
		ctx:       ctx,
		cancel:    cancel,
		ips:       make(map[uint32]struct{}),
		ports:     make(map[uint16]struct{}),
		lastReset: time.Now(),
	}, nil
}

// setupEBPF loads and attaches the eBPF program
func (app *Application) setupEBPF() error {
	log.Printf("üîß Setting up eBPF program...")

	// Remove memory limit for eBPF
	if err := rlimit.RemoveMemlock(); err != nil {
		return fmt.Errorf("removing memlock: %w", err)
	}

	// Load eBPF objects (generated by bpf2go)
	app.objs = &networkObjects{}
	if err := loadNetworkObjects(app.objs, nil); err != nil {
		return fmt.Errorf("loading eBPF objects: %w", err)
	}

	// Find network interface
	iface, err := app.findInterface()
	if err != nil {
		return fmt.Errorf("finding interface: %w", err)
	}

	// Attach XDP program
	app.link, err = link.AttachXDP(link.XDPOptions{
		Program:   app.objs.NetworkMonitor,
		Interface: iface.Index,
	})
	if err != nil {
		return fmt.Errorf("attaching XDP to %s: %w", iface.Name, err)
	}

	// Create ring buffer reader
	app.reader, err = ringbuf.NewReader(app.objs.Events)
	if err != nil {
		return fmt.Errorf("creating ring buffer reader: %w", err)
	}

	log.Printf("‚úÖ eBPF program attached to interface %s", iface.Name)
	return nil
}

// findInterface finds a suitable network interface for eBPF
func (app *Application) findInterface() (*net.Interface, error) {
	// Try configured interface first
	if app.config.Interface != "" {
		if iface, err := net.InterfaceByName(app.config.Interface); err == nil {
			log.Printf("‚úÖ Using configured interface: %s", iface.Name)
			return iface, nil
		}
	}

	// Try common Kubernetes/container interfaces
	candidates := []string{"eth0", "cilium_host", "cni0", "docker0", "veth0", "lo"}
	
	for _, name := range candidates {
		if iface, err := net.InterfaceByName(name); err == nil && iface.Flags&net.FlagUp != 0 {
			log.Printf("‚úÖ Using interface: %s", name)
			return iface, nil
		}
	}

	return nil, fmt.Errorf("no suitable interface found (tried: %v)", candidates)
}

// startEventProcessor processes eBPF events from ring buffer
func (app *Application) startEventProcessor() {
	go func() {
		defer func() {
			if r := recover(); r != nil {
				log.Printf("‚ùå Event processor panic: %v", r)
				metrics.ProcessorErrorsTotal.Inc()
			}
		}()

		log.Printf("üîÑ Starting eBPF event processor...")

		for {
			select {
			case <-app.ctx.Done():
				log.Printf("üõë eBPF event processor stopping...")
				return
			default:
				// Read from ring buffer
				record, err := app.reader.Read()
				if err != nil {
					if app.isClosedError(err) {
						return
					}
					log.Printf("‚ö†Ô∏è  Ring buffer read error: %v", err)
					metrics.RingbufLostEventsTotal.Inc()
					time.Sleep(10 * time.Millisecond)
					continue
				}

				// Parse network event
				var event NetworkEvent
				if err := binary.Read(bytes.NewReader(record.RawSample), binary.LittleEndian, &event); err != nil {
					log.Printf("‚ö†Ô∏è  Event parse error: %v", err)
					metrics.ParseErrorsTotal.Inc()
					continue
				}

				// Process the event
				app.processEvent(event)
				metrics.EventsProcessedTotal.Inc()
			}
		}
	}()
}

// isClosedError checks if error indicates closed ring buffer
func (app *Application) isClosedError(err error) bool {
	errStr := err.Error()
	return strings.Contains(errStr, "closed") || 
		   strings.Contains(errStr, "EOF") ||
		   strings.Contains(errStr, "context canceled")
}

// ipToString converts IP from uint32 to string
func ipToString(ip uint32) string {
	return fmt.Sprintf("%d.%d.%d.%d",
		byte(ip), byte(ip>>8), byte(ip>>16), byte(ip>>24))
}

// processEvent processes a network event
func (app *Application) processEvent(event NetworkEvent) {
	app.mu.Lock()
	defer app.mu.Unlock()

	// Update counters
	switch event.Protocol {
	case 6: // TCP
		app.tcpPackets++
		if event.TCPFlags&0x02 != 0 { // SYN flag
			app.synPackets++
			metrics.SynPacketsTotal.Inc()
		}
		metrics.PacketsProcessed.WithLabelValues("tcp", "inbound").Inc()
	case 17: // UDP  
		app.udpPackets++
		metrics.PacketsProcessed.WithLabelValues("udp", "inbound").Inc()
	default:
		metrics.PacketsProcessed.WithLabelValues("other", "inbound").Inc()
	}

	metrics.BytesProcessed.WithLabelValues(protocolName(event.Protocol)).Add(float64(event.PacketSize))

	// Track unique IPs and ports
	app.ips[event.SrcIP] = struct{}{}
	app.ips[event.DstIP] = struct{}{}
	if event.SrcPort != 0 {
		app.ports[event.SrcPort] = struct{}{}
	}
	if event.DstPort != 0 {
		app.ports[event.DstPort] = struct{}{}
	}

	app.totalBytes += uint64(event.PacketSize)
	app.totalPkts++

	// Log interesting packets
	if event.SrcPort != 0 || event.DstPort != 0 {
		log.Printf("üåê eBPF CAPTURED: %s:%d -> %s:%d [%s] %d bytes flags:0x%02x", 
			ipToString(event.SrcIP), event.SrcPort,
			ipToString(event.DstIP), event.DstPort,
			protocolName(event.Protocol), event.PacketSize, event.TCPFlags)
	}
}

// protocolName converts protocol number to string
func protocolName(proto uint8) string {
	switch proto {
	case 6:
		return "tcp"
	case 17:
		return "udp"
	case 1:
		return "icmp"
	default:
		return "other"
	}
}

// updateStats periodically updates statistics
func (app *Application) updateStats() {
	ticker := time.NewTicker(app.config.StatsWindow)
	defer ticker.Stop()

	for {
		select {
		case <-app.ctx.Done():
			return
		case <-ticker.C:
			app.mu.Lock()
			elapsed := time.Since(app.lastReset).Seconds()
			if elapsed > 0 {
				app.stats.PacketsPerSecond = float64(app.totalPkts) / elapsed
				app.stats.BytesPerSecond = float64(app.totalBytes) / elapsed
				app.stats.UniqueIPs = len(app.ips)
				app.stats.UniquePorts = len(app.ports)
				app.stats.TCPPackets = app.tcpPackets
				app.stats.UDPPackets = app.udpPackets
				app.stats.SYNPackets = app.synPackets

				// Update Prometheus gauges
				metrics.PacketsPerSecond.Set(app.stats.PacketsPerSecond)
				metrics.BytesPerSecond.Set(app.stats.BytesPerSecond)
				metrics.UniqueIPs.Set(float64(app.stats.UniqueIPs))
				metrics.UniquePorts.Set(float64(app.stats.UniquePorts))

				// Reset for next window
				app.ips = make(map[uint32]struct{})
				app.ports = make(map[uint16]struct{})
				app.tcpPackets = 0
				app.udpPackets = 0
				app.synPackets = 0
				app.totalBytes = 0
				app.totalPkts = 0
				app.lastReset = time.Now()
			}
			app.mu.Unlock()
		}
	}
}

// getStats returns current statistics
func (app *Application) getStats() NetworkStats {
	app.mu.RLock()
	defer app.mu.RUnlock()
	return app.stats
}

// startHTTPServer starts the HTTP API server
func (app *Application) startHTTPServer() error {
	mux := http.NewServeMux()

	// Health check
	mux.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]interface{}{
			"status":    "healthy",
			"service":   "ebpf-monitor", 
			"version":   "3.0.0",
			"mode":      "eBPF_real_traffic",
			"timestamp": time.Now().Format(time.RFC3339),
		})
	})

	// Statistics
	mux.HandleFunc("/stats", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(app.getStats())
	})

	// Root info
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]interface{}{
			"service":     "eBPF Network Monitor",
			"version":     "3.0.0",
			"description": "Real-time network monitoring using eBPF + AI threat detection",
			"endpoints": []string{"/health", "/stats", "/metrics"},
		})
	})

	// Prometheus metrics
	mux.Handle("/metrics", promhttp.Handler())

	log.Printf("üåê HTTP server starting on %s", app.config.HTTPAddr)

	server := &http.Server{
		Addr:         app.config.HTTPAddr,
		Handler:      mux,
		ReadTimeout:  app.config.ReadTimeout,
		WriteTimeout: app.config.WriteTimeout,
		IdleTimeout:  app.config.IdleTimeout,
	}

	go func() {
		<-app.ctx.Done()
		log.Printf("üõë HTTP server shutting down...")
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		server.Shutdown(ctx)
	}()

	return server.ListenAndServe()
}

// startMLClient sends data to ML Detector
func (app *Application) startMLClient() {
	log.Printf("ü§ñ ML client starting -> %s (every %v)", app.config.MLDetectorURL, app.config.PostInterval)

	go func() {
		ticker := time.NewTicker(app.config.PostInterval)
		defer ticker.Stop()

		for {
			select {
			case <-app.ctx.Done():
				log.Printf("üõë ML client stopping...")
				return
			case <-ticker.C:
				stats := app.getStats()
				
				features := map[string]interface{}{
					"packets_per_second": stats.PacketsPerSecond,
					"bytes_per_second":   stats.BytesPerSecond,
					"unique_ips":         stats.UniqueIPs,
					"unique_ports":       stats.UniquePorts,
					"tcp_packets":        stats.TCPPackets,
					"udp_packets":        stats.UDPPackets,
					"syn_packets":        stats.SYNPackets,
				}

				log.Printf("üìä Sending to ML: pps=%.2f, bps=%.2f, ips=%d, ports=%d", 
					stats.PacketsPerSecond, stats.BytesPerSecond, stats.UniqueIPs, stats.UniquePorts)

				if err := app.sendToMLDetector(features); err != nil {
					log.Printf("‚ö†Ô∏è  ML Detector error: %v", err)
					metrics.MLPostFailuresTotal.Inc()
				} else {
					log.Printf("‚úÖ ML Detector: data sent successfully")
				}
			}
		}
	}()
}

// sendToMLDetector sends features to ML Detector
func (app *Application) sendToMLDetector(features map[string]interface{}) error {
	jsonData, err := json.Marshal(features)
	if err != nil {
		return fmt.Errorf("marshaling: %w", err)
	}

	client := &http.Client{Timeout: app.config.HTTPClientTimeout}
	resp, err := client.Post(
		app.config.MLDetectorURL+"/detect",
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("HTTP post: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode >= 400 {
		return fmt.Errorf("ML detector status: %d", resp.StatusCode)
	}

	// eBPF Monitor only sends data - ML Detector handles threat detection
	return nil
}

// cleanup releases eBPF resources
func (app *Application) cleanup() {
	log.Printf("üßπ Cleaning up eBPF resources...")
	
	app.cancel()
	
	if app.reader != nil {
		app.reader.Close()
	}
	
	if app.link != nil {
		app.link.Close()
	}
	
	if app.objs != nil {
		app.objs.Close()
	}
	
	log.Printf("‚úÖ eBPF cleanup completed")
}

// Run starts the eBPF application
func (app *Application) Run() error {
	log.Printf("üöÄ Starting eBPF Network Monitor v3.0.0")
	log.Printf("üìä Interface: %s, HTTP: %s, ML: %s", 
		app.config.Interface, app.config.HTTPAddr, app.config.MLDetectorURL)

	// Setup eBPF program
	if err := app.setupEBPF(); err != nil {
		return fmt.Errorf("eBPF setup failed: %w", err)
	}

	// Start statistics updater
	go app.updateStats()

	// Start eBPF event processor
	app.startEventProcessor()

	// Start ML client
	go app.startMLClient()

	// Start HTTP server
	go func() {
		if err := app.startHTTPServer(); err != nil && err != http.ErrServerClosed {
			log.Printf("‚ùå HTTP server error: %v", err)
		}
	}()

	log.Printf("‚úÖ eBPF Network Monitor ready - capturing REAL network traffic!")

	// Wait for shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
	
	<-sigChan
	log.Printf("üõë Shutdown signal received")
	
	app.cleanup()
	return nil
}

func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)

	app, err := NewApplication()
	if err != nil {
		log.Fatalf("‚ùå Application creation failed: %v", err)
	}

	if err := app.Run(); err != nil {
		log.Fatalf("‚ùå eBPF application failed: %v", err)
	}
}